import React, { useState, useEffect } from "react";
import styled, { css } from "styled-components";
import { FaSun, FaMoon, FaBars, FaTimes } from "react-icons/fa";
import { FaTent } from "react-icons/fa6";
import { motion } from "framer-motion";
import img from "../assets/8.avif";

const Navbar = ({ toggleTheme }) => {
  const savedDarkMode = localStorage.getItem("darkMode") === "true";
  const [darkMode, setDarkMode] = useState(savedDarkMode);
  const [isOpen, setIsOpen] = useState(false);

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem("darkMode", newDarkMode);
    document.body.classList.toggle("dark-mode", newDarkMode);
    toggleTheme();
  };

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const handleSmoothScroll = (e, targetId) => {
    e.preventDefault();
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      const navbarHeight = document.querySelector("nav").offsetHeight;
      const targetPosition = targetElement.offsetTop - navbarHeight;
      window.scrollTo({
        top: targetPosition,
        behavior: "smooth",
      });
      setIsOpen(false);
    }
  };

  const scrollToTop = (e) => {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setIsOpen(false);
  };

  useEffect(() => {
    const savedDarkMode = localStorage.getItem("darkMode") === "true";
    setDarkMode(savedDarkMode);
    document.body.classList.toggle("dark-mode", savedDarkMode);
  }, []);

  return (
    <NavbarContainer darkMode={darkMode}>
      <NavbarWrapper>
        <Logo onClick={scrollToTop}>
          <img src={img} alt="fotografia namiotu białego" />
          Wynajem Namiotów
        </Logo>
        <MobileIcon onClick={toggleMenu}>
          {isOpen ? <FaTimes /> : <FaBars />}
        </MobileIcon>
      </NavbarWrapper>
      <NavLinksContainer>
        <NavLinks isOpen={isOpen}>
          <NavLink
            href="#start"
            onClick={(e) => handleSmoothScroll(e, "start")}
          >
            Start
          </NavLink>
          <NavLink
            href="#o-firmie"
            onClick={(e) => handleSmoothScroll(e, "o-firmie")}
          >
            O&nbsp;firmie
          </NavLink>
          <NavLink
            href="#kontakt"
            onClick={(e) => handleSmoothScroll(e, "kontakt")}
          >
            Kontakt
          </NavLink>
          <NavLink
            href="#galeria"
            onClick={(e) => handleSmoothScroll(e, "galeria")}
          >
            Oferta
          </NavLink>
          <DarkModeToggle onClick={toggleDarkMode}>
            {darkMode ? <FaSun /> : <FaMoon />}
          </DarkModeToggle>
          <MobileTentIcon>
            <span
              data-tooltip-id="tentTooltip"
              data-tooltip-content="Namioty Imprezowe"
            >
              <motion.div
                whileHover={{ scale: 1.1, rotate: 10 }}
                whileTap={{ scale: 0.9 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <FaTent size={40} />
              </motion.div>
            </span>
          </MobileTentIcon>
        </NavLinks>
      </NavLinksContainer>
    </NavbarContainer>
  );
};

const NavbarContainer = styled(({ darkMode, ...props }) => <nav {...props} />)`
  position: fixed;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);

  ${({ darkMode }) =>
    darkMode &&
    css`
      background: ${({ theme }) => theme.body};
      color: ${({ theme }) => theme.text};
    `}
`;

const NavbarWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 960px;
  padding: 20px;
`;

const Logo = styled.div`
  display: flex;
  align-items: center;
  cursor: pointer;
  color: ${({ theme }) => theme.text};

  img {
    width: 50px;
    height: auto;
    margin-right: 10px;
  }
`;

const MobileIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    cursor: pointer;
    font-size: 1.5rem;
    color: ${({ theme }) => theme.text};
    z-index: 1000;
  }
`;

const NavLinksContainer = styled.div`
  @media screen and (min-width: 961px) {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-direction: row;
    background: none;
    color: ${({ theme }) => theme.text};
  }
`;

const NavLinks = styled(({ isOpen, ...props }) => <div {...props} />)`
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 20px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  transition: transform 0.3s ease-in-out;
  transform: ${({ isOpen }) =>
    isOpen ? "translateY(0)" : "translateY(-100%)"};
  width: 100%;
  z-index: 998;

  @media screen and (min-width: 961px) {
    display: flex;
    flex-direction: row;
    gap: 0;
    position: relative;
    transform: translateY(0);
    background: none;
  }
`;

const NavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 1rem 0;
  text-align: center;
  transition: color 0.3s;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0;
    margin: 0 10px;
  }
`;

const MobileTentIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    text-align: center;
    margin-top: 20px;
  }
`;

const DarkModeToggle = styled.div`
  cursor: pointer;
  display: flex;
  justify-content: center;
  margin-top: 20px;

  svg {
    font-size: 1.2rem;
    color: ${({ theme }) => theme.text};
    transition: color 0.3s;
  }

  &:hover svg {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    margin-top: 0;
    margin-left: 10px; /* Dodaj margines lewy */
  }
`;

export default Navbar;



import React, { useState, useEffect } from "react";
import styled, { css } from "styled-components";
import { FaSun, FaMoon, FaBars, FaTimes } from "react-icons/fa";
import { FaTent } from "react-icons/fa6";
import { motion } from "framer-motion";
import img from "../assets/8.avif";

const Navbar = ({ toggleTheme }) => {
  const savedDarkMode = localStorage.getItem("darkMode") === "true";
  const [darkMode, setDarkMode] = useState(savedDarkMode);
  const [isOpen, setIsOpen] = useState(false);
  const [isOfertaOpen, setIsOfertaOpen] = useState(false);

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem("darkMode", newDarkMode);
    document.body.classList.toggle("dark-mode", newDarkMode);
    toggleTheme();
  };

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const toggleOferta = () => {
    setIsOfertaOpen(!isOfertaOpen);
  };

  const handleSmoothScroll = (e, targetId) => {
    e.preventDefault();
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      const navbarHeight = document.querySelector("nav").offsetHeight;
      const targetPosition = targetElement.offsetTop - navbarHeight;
      window.scrollTo({
        top: targetPosition,
        behavior: "smooth",
      });
      setIsOpen(false);
      setIsOfertaOpen(false);
    }
  };

  const scrollToTop = (e) => {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setIsOpen(false);
    setIsOfertaOpen(false);
  };

  useEffect(() => {
    const savedDarkMode = localStorage.getItem("darkMode") === "true";
    setDarkMode(savedDarkMode);
    document.body.classList.toggle("dark-mode", savedDarkMode);
  }, []);

  return (
    <NavbarContainer darkMode={darkMode}>
      <NavbarWrapper>
        <Logo onClick={scrollToTop}>
          <img src={img} alt="fotografia namiotu białego" />
          Wynajem Namiotów
        </Logo>
        <MobileIcon onClick={toggleMenu}>
          {isOpen ? <FaTimes /> : <FaBars />}
        </MobileIcon>
      </NavbarWrapper>
      <NavLinksContainer>
        <NavLinks isOpen={isOpen}>
          <NavLink
            href="#start"
            onClick={(e) => handleSmoothScroll(e, "start")}
          >
            Start
          </NavLink>
          <NavLink
            href="#o-firmie"
            onClick={(e) => handleSmoothScroll(e, "o-firmie")}
          >
            O&nbsp;firmie
          </NavLink>
          <NavLink
            href="#kontakt"
            onClick={(e) => handleSmoothScroll(e, "kontakt")}
          >
            Kontakt
          </NavLink>
          <NavLink as="div" onClick={toggleOferta}>
            Oferta
            {isOfertaOpen && (
              <SubMenu>
                <SubNavLink
                  href="#galeria"
                  onClick={(e) => handleSmoothScroll(e, "galeria")}
                >
                  Wizualna
                </SubNavLink>
                <SubNavLink
                  href="#cennik"
                  onClick={(e) => handleSmoothScroll(e, "cennik")}
                >
                  Cenowa
                </SubNavLink>
              </SubMenu>
            )}
          </NavLink>
          <DarkModeToggle onClick={toggleDarkMode}>
            {darkMode ? <FaSun /> : <FaMoon />}
          </DarkModeToggle>
          <MobileTentIcon>
            <span
              data-tooltip-id="tentTooltip"
              data-tooltip-content="Namioty Imprezowe"
            >
              <motion.div
                whileHover={{ scale: 1.1, rotate: 10 }}
                whileTap={{ scale: 0.9 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <FaTent size={40} />
              </motion.div>
            </span>
          </MobileTentIcon>
        </NavLinks>
      </NavLinksContainer>
    </NavbarContainer>
  );
};

const NavbarContainer = styled(({ darkMode, ...props }) => <nav {...props} />)`
  position: fixed;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);

  ${({ darkMode }) =>
    darkMode &&
    css`
      background: ${({ theme }) => theme.body};
      color: ${({ theme }) => theme.text};
    `}
`;

const NavbarWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 960px;
  padding: 20px;
`;

const Logo = styled.div`
  display: flex;
  align-items: center;
  cursor: pointer;
  color: ${({ theme }) => theme.text};

  img {
    width: 50px;
    height: auto;
    margin-right: 10px;
  }
`;

const MobileIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    cursor: pointer;
    font-size: 1.5rem;
    color: ${({ theme }) => theme.text};
    z-index: 1000;
  }
`;

const NavLinksContainer = styled.div`
  @media screen and (min-width: 961px) {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-direction: row;
    background: none;
    color: ${({ theme }) => theme.text};
  }
`;

const NavLinks = styled(({ isOpen, ...props }) => <div {...props} />)`
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 20px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  transition: transform 0.3s ease-in-out;
  transform: ${({ isOpen }) =>
    isOpen ? "translateY(0)" : "translateY(-100%)"};
  width: 100%;
  z-index: 998;

  @media screen and (min-width: 961px) {
    display: flex;
    flex-direction: row;
    gap: 0;
    position: relative;
    transform: translateY(0);
    background: none;
  }
`;

const NavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 1rem 0;
  text-align: center;
  transition: color 0.3s;
  cursor: pointer;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0;
    margin: 0 10px;
  }
`;

const SubMenu = styled.div`
  display: flex;
  flex-direction: column;
  margin-top: 10px;
  align-items: center;

  @media screen and (min-width: 961px) {
    position: absolute;
    background: ${({ theme }) => theme.body};
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
`;

const SubNavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 0.5rem 1rem;
  text-align: left;
  transition: color 0.3s;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0.5rem 2rem;
  }
`;

const MobileTentIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    text-align: center;
    margin-top: 20px;
  }
`;

const DarkModeToggle = styled.div`
  cursor: pointer;
  display: flex;
  justify-content: center;
  margin-top: 20px;

  svg {
    font-size: 1.2rem;
    color: ${({ theme }) => theme.text};
    transition: color 0.3s;
  }

  &:hover svg {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    margin-top: 0;
    margin-left: 10px; /* Dodaj margines lewy */
  }
`;

export default Navbar;



import React, { useState, useEffect } from "react";
import styled, { css } from "styled-components";
import { FaSun, FaMoon, FaBars, FaTimes } from "react-icons/fa";
import { FaTent } from "react-icons/fa6";
import { motion } from "framer-motion";
import img from "../assets/8.avif";

const Navbar = ({ toggleTheme }) => {
  const savedDarkMode = localStorage.getItem("darkMode") === "true";
  const [darkMode, setDarkMode] = useState(savedDarkMode);
  const [isOpen, setIsOpen] = useState(false);
  const [isOfertaOpen, setIsOfertaOpen] = useState(false);

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem("darkMode", newDarkMode);
    document.body.classList.toggle("dark-mode", newDarkMode);
    toggleTheme();
  };

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const toggleOferta = () => {
    setIsOfertaOpen(!isOfertaOpen);
  };

  const handleSmoothScroll = (e, targetId) => {
    e.preventDefault();
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      const navbarHeight = document.querySelector("nav").offsetHeight;
      const targetPosition = targetElement.offsetTop - navbarHeight;
      window.scrollTo({
        top: targetPosition,
        behavior: "smooth",
      });
      setIsOpen(false);
      setIsOfertaOpen(false);
    }
  };

  const scrollToTop = (e) => {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setIsOpen(false);
    setIsOfertaOpen(false);
  };

  useEffect(() => {
    const savedDarkMode = localStorage.getItem("darkMode") === "true";
    setDarkMode(savedDarkMode);
    document.body.classList.toggle("dark-mode", savedDarkMode);
  }, []);

  return (
    <NavbarContainer darkMode={darkMode}>
      <NavbarWrapper>
        <Logo onClick={scrollToTop}>
          <img src={img} alt="fotografia namiotu białego" />
          Wynajem Namiotów
        </Logo>
        <MobileIcon onClick={toggleMenu}>
          {isOpen ? <FaTimes /> : <FaBars />}
        </MobileIcon>
      </NavbarWrapper>
      <NavLinksContainer>
        <NavLinks isOpen={isOpen}>
          <NavLink
            href="#start"
            onClick={(e) => handleSmoothScroll(e, "start")}
          >
            Start
          </NavLink>
          <NavLink
            href="#o-firmie"
            onClick={(e) => handleSmoothScroll(e, "o-firmie")}
          >
            O&nbsp;firmie
          </NavLink>
          <NavLink
            href="#kontakt"
            onClick={(e) => handleSmoothScroll(e, "kontakt")}
          >
            Kontakt
          </NavLink>
          <NavLink as="div" onClick={toggleOferta}>
            Oferta
            {isOfertaOpen && (
              <SubMenu>
                <SubNavLink
                  href="#galeria"
                  onClick={(e) => handleSmoothScroll(e, "galeria")}
                >
                  Wizualna
                </SubNavLink>
                <SubNavLink
                  href="#cennik"
                  onClick={(e) => handleSmoothScroll(e, "cennik")}
                >
                  Cenowa
                </SubNavLink>
              </SubMenu>
            )}
          </NavLink>
          <DarkModeToggle onClick={toggleDarkMode}>
            {darkMode ? <FaSun /> : <FaMoon />}
          </DarkModeToggle>
          <MobileTentIcon>
            <span
              data-tooltip-id="tentTooltip"
              data-tooltip-content="Namioty Imprezowe"
            >
              <motion.div
                whileHover={{ scale: 1.1, rotate: 10 }}
                whileTap={{ scale: 0.9 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <FaTent size={40} />
              </motion.div>
            </span>
          </MobileTentIcon>
        </NavLinks>
      </NavLinksContainer>
    </NavbarContainer>
  );
};

const NavbarContainer = styled(({ darkMode, ...props }) => <nav {...props} />)`
  position: fixed;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);

  ${({ darkMode }) =>
    darkMode &&
    css`
      background: ${({ theme }) => theme.body};
      color: ${({ theme }) => theme.text};
    `}
`;

const NavbarWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 960px;
  padding: 20px;
`;

const Logo = styled.div`
  display: flex;
  align-items: center;
  cursor: pointer;
  color: ${({ theme }) => theme.text};

  img {
    width: 50px;
    height: auto;
    margin-right: 10px;
  }
`;

const MobileIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    cursor: pointer;
    font-size: 1.5rem;
    color: ${({ theme }) => theme.text};
    z-index: 1000;
  }
`;

const NavLinksContainer = styled.div`
  @media screen and (min-width: 961px) {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-direction: row;
    background: none;
    color: ${({ theme }) => theme.text};
  }
`;

const NavLinks = styled(({ isOpen, ...props }) => <div {...props} />)`
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 20px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  transition: transform 0.3s ease-in-out;
  transform: ${({ isOpen }) =>
    isOpen ? "translateY(0)" : "translateY(-100%)"};
  width: 100%;
  z-index: 998;

  @media screen and (min-width: 961px) {
    display: flex;
    flex-direction: row;
    gap: 0;
    position: relative;
    transform: translateY(0);
    background: none;
  }
`;

const NavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 1rem 0;
  text-align: center;
  transition: color 0.3s;
  cursor: pointer;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0;
    margin: 0 10px;
  }
`;

const SubMenu = styled.div`
  display: flex;
  flex-direction: column;
  margin-top: 10px;

  @media screen and (min-width: 961px) {
    position: absolute;
    background: ${({ theme }) => theme.body};
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
`;

const SubNavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 0.5rem 1rem;
  text-align: left;
  transition: color 0.3s;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0.5rem 2rem;
  }
`;

const MobileTentIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    text-align: center;
    margin-top: 20px;
  }
`;

const DarkModeToggle = styled.div`
  cursor: pointer;
  display: flex;
  justify-content: center;
  margin-top: 20px;

  svg {
    font-size: 1.2rem;
    color: ${({ theme }) => theme.text};
    transition: color 0.3s;
  }

  &:hover svg {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    margin-top: 0;
    margin-left: 10px; /* Dodaj margines lewy */
  }
`;

export default Navbar;



import React, { useState, useEffect } from "react";
import styled, { css } from "styled-components";
import { FaSun, FaMoon, FaBars, FaTimes } from "react-icons/fa";
import { FaTent } from "react-icons/fa6";
import { motion } from "framer-motion";
import img from "../assets/8.avif";

const Navbar = ({ toggleTheme }) => {
  const savedDarkMode = localStorage.getItem("darkMode") === "true";
  const [darkMode, setDarkMode] = useState(savedDarkMode);
  const [isOpen, setIsOpen] = useState(false);
  const [isOfertaOpen, setIsOfertaOpen] = useState(false);

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem("darkMode", newDarkMode);
    document.body.classList.toggle("dark-mode", newDarkMode);
    toggleTheme();
  };

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const toggleOferta = () => {
    setIsOfertaOpen(!isOfertaOpen);
  };

  const handleSmoothScroll = (e, targetId) => {
    e.preventDefault();
    const targetElement = document.getElementById(targetId);
    if (targetElement) {
      const navbarHeight = document.querySelector("nav").offsetHeight;
      const targetPosition = targetElement.offsetTop - navbarHeight;
      window.scrollTo({
        top: targetPosition,
        behavior: "smooth",
      });
      setIsOpen(false);
      setIsOfertaOpen(false);
    }
  };

  const scrollToTop = (e) => {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setIsOpen(false);
    setIsOfertaOpen(false);
  };

  useEffect(() => {
    const savedDarkMode = localStorage.getItem("darkMode") === "true";
    setDarkMode(savedDarkMode);
    document.body.classList.toggle("dark-mode", savedDarkMode);
  }, []);

  return (
    <NavbarContainer darkMode={darkMode}>
      <NavbarWrapper>
        <Logo onClick={scrollToTop}>
          <img src={img} alt="fotografia namiotu białego" />
          Wynajem Namiotów
        </Logo>
        <MobileIcon onClick={toggleMenu}>
          {isOpen ? <FaTimes /> : <FaBars />}
        </MobileIcon>
      </NavbarWrapper>
      <NavLinksContainer>
        <NavLinks isOpen={isOpen}>
          <NavLink
            href="#start"
            onClick={(e) => handleSmoothScroll(e, "start")}
          >
            Start
          </NavLink>
          <NavLink
            href="#o-firmie"
            onClick={(e) => handleSmoothScroll(e, "o-firmie")}
          >
            O&nbsp;firmie
          </NavLink>
          <NavLink
            href="#kontakt"
            onClick={(e) => handleSmoothScroll(e, "kontakt")}
          >
            Kontakt
          </NavLink>
          <NavLink as="div" onClick={toggleOferta}>
            Oferta
            <SubMenu
              initial={{ height: 0, opacity: 0 }}
              animate={{
                height: isOfertaOpen ? "auto" : 0,
                opacity: isOfertaOpen ? 1 : 0,
              }}
              transition={{ duration: 0.5 }}
            >
              <SubNavLink
                href="#galeria"
                onClick={(e) => handleSmoothScroll(e, "galeria")}
              >
                Wizualna
              </SubNavLink>
              <SubNavLink
                href="#cennik"
                onClick={(e) => handleSmoothScroll(e, "cennik")}
              >
                Cenowa
              </SubNavLink>
            </SubMenu>
          </NavLink>
          <DarkModeToggle onClick={toggleDarkMode}>
            {darkMode ? <FaSun /> : <FaMoon />}
          </DarkModeToggle>
          <MobileTentIcon>
            <span
              data-tooltip-id="tentTooltip"
              data-tooltip-content="Namioty Imprezowe"
            >
              <motion.div
                whileHover={{ scale: 1.1, rotate: 10 }}
                whileTap={{ scale: 0.9 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <FaTent size={40} />
              </motion.div>
            </span>
          </MobileTentIcon>
        </NavLinks>
      </NavLinksContainer>
    </NavbarContainer>
  );
};

const NavbarContainer = styled(({ darkMode, ...props }) => <nav {...props} />)`
  position: fixed;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);

  ${({ darkMode }) =>
    darkMode &&
    css`
      background: ${({ theme }) => theme.body};
      color: ${({ theme }) => theme.text};
    `}
`;

const NavbarWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 960px;
  padding: 20px;
`;

const Logo = styled.div`
  display: flex;
  align-items: center;
  cursor: pointer;
  color: ${({ theme }) => theme.text};

  img {
    width: 50px;
    height: auto;
    margin-right: 10px;
  }
`;

const MobileIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    cursor: pointer;
    font-size: 1.5rem;
    color: ${({ theme }) => theme.text};
    z-index: 1000;
  }
`;

const NavLinksContainer = styled.div`
  @media screen and (min-width: 961px) {
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-direction: row;
    background: none;
    color: ${({ theme }) => theme.text};
  }
`;

const NavLinks = styled(({ isOpen, ...props }) => <div {...props} />)`
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 20px;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: ${({ theme }) => theme.body};
  color: ${({ theme }) => theme.text};
  transition: transform 0.3s ease-in-out;
  transform: ${({ isOpen }) =>
    isOpen ? "translateY(0)" : "translateY(-100%)"};
  width: 100%;
  z-index: 998;

  @media screen and (min-width: 961px) {
    display: flex;
    flex-direction: row;
    gap: 0;
    position: relative;
    transform: translateY(0);
    background: none;
  }
`;

const NavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 1rem 0;
  text-align: center;
  transition: color 0.3s;
  cursor: pointer;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0;
    margin: 0 10px;
  }
`;

const SubMenu = styled(motion.div)`
  display: flex;
  flex-direction: column;
  overflow: hidden;
  margin-top: 10px;

  @media screen and (min-width: 961px) {
    position: absolute;
    background: ${({ theme }) => theme.body};
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
`;

const SubNavLink = styled.a`
  color: ${({ theme }) => theme.text};
  text-decoration: none;
  padding: 0.5rem 1rem;
  text-align: left;
  transition: color 0.3s;

  &:hover {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    padding: 0.5rem 2rem;
  }
`;

const MobileTentIcon = styled.div`
  display: none;

  @media screen and (max-width: 960px) {
    display: block;
    text-align: center;
    margin-top: 20px;
  }
`;

const DarkModeToggle = styled.div`
  cursor: pointer;
  display: flex;
  justify-content: center;
  margin-top: 20px;

  svg {
    font-size: 1.2rem;
    color: ${({ theme }) => theme.text};
    transition: color 0.3s;
  }

  &:hover svg {
    color: ${({ theme }) => theme.linkHover};
  }

  @media screen and (min-width: 961px) {
    margin-top: 0;
    margin-left: 10px; /* Dodaj margines lewy */
  }
`;

export default Navbar;



import React, { useState, useEffect, lazy, Suspense } from "react";
import styled, { ThemeProvider } from "styled-components";
import { lightTheme, darkTheme } from "./styles/themes";
import { Header } from "./components/Header";
import GlobalStyle from "./styles/GlobalStyle";
import ScrollToTopButton from "./ScrollToTopButton";
import { Footer } from "./components/Footer";
import image from "./assets/19.webp";

const Navbar = lazy(() => import("./components/Navbar"));
const Gallery = lazy(() => import("./components/Gallery"));
const About = lazy(() => import("./components/About"));
const Contact = lazy(() => import("./components/Contact"));
const CookieConsent = lazy(() => import("react-cookie-consent"));

// Stylizowany komponent dla napisu "Loading components..."
const LoadingContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  width: 100vw;
  background: #f0f0f0;
  font-size: 24px;
  color: #333;
  background: url(${image}) center center/contain no-repeat;

  @media (min-width: 460px) {
    background: url(${image}) center center/20% no-repeat;
  }
`;

const AppContainer = styled.div`
  display: flex;
  flex-direction: column;
  min-height: 100vh;
`;

function App() {
  const [theme, setTheme] = useState(() => {
    const savedTheme = localStorage.getItem("theme");
    return savedTheme ? savedTheme : "light";
  });

  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    updateBodyClass(newTheme);
  };

  const updateBodyClass = (theme) => {
    document.body.classList.toggle("dark-mode", theme === "dark");
    document.body.classList.toggle("light-mode", theme === "light");
  };

  useEffect(() => {
    updateBodyClass(theme);
  }, [theme]);

  return (
    <ThemeProvider theme={theme === "light" ? lightTheme : darkTheme}>
      <GlobalStyle />
      <AppContainer id="start">
        <Suspense
          fallback={
            <LoadingContainer>
              {/* Możesz również dodać tekst tutaj */}
            </LoadingContainer>
          }
        >
          <Navbar toggleTheme={toggleTheme} />
          <Header />
          <About />
          <Contact />
          <Gallery theme={theme} />
          <Footer />
          <CookieConsent
            debug={true}
            location="bottom"
            style={{
              background: "#333",
              textAlign: "left",
              paddingBottom: "1rem",
              fontSize: "16px",
              fontFamily: "Gideon Roman",
            }}
            buttonStyle={{
              color: "#333",
              background: "#fff",
              fontSize: "18px",
              fontFamily: "Gideon Roman",
              marginRight: "1rem",
            }}
            buttonText="OK, rozumiem"
            expires={365}
          >
            "W ramach naszej witryny stosujemy pliki cookies w celu świadczenia
            Państwu usług na najwyższym poziomie, w tym w sposób dostosowany do
            indywidualnych potrzeb. Korzystanie z witryny bez zmiany ustawień
            dotyczących cookies oznacza, że będą one zamieszczane w Państwa
            urządzeniu końcowym. Możecie Państwo dokonać w każdym czasie zmiany
            ustawień dotyczących cookies."
          </CookieConsent>
        </Suspense>
        <ScrollToTopButton />
      </AppContainer>
    </ThemeProvider>
  );
}

export default App;



import React, { useEffect, useState } from "react";
import Slider from "react-slick";
import styled, { ThemeProvider, withTheme } from "styled-components";
import { FaArrowLeft, FaArrowRight } from "react-icons/fa";
import { motion, useAnimation } from "framer-motion";
import image1 from "../assets/1.avif";
import image2 from "../assets/2.avif";
import image3 from "../assets/3.avif";
import image4 from "../assets/6.avif";
import image5 from "../assets/7.avif";
import image6 from "../assets/17.webp";
import image7 from "../assets/9.avif";
import { lightTheme, darkTheme } from "../styles/themes";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

// Styled components
const GalleryContainer = styled.section`
  margin: 0 5rem;
  padding: 2rem;
  background: ${(props) => props.theme.background};
  position: relative;
  z-index: 0;
  border-radius: 15px;

  @media (max-width: 768px) {
    margin: 0 1rem;
    padding: 1rem;
  }
`;

const MotionTitle = styled(motion.h2)`
  font-size: 2rem;
  color: ${(props) => props.theme.text};
  margin-bottom: 2rem;
  margin-left: 5rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);

  @media (max-width: 768px) {
    font-size: 1.7rem;
    margin-bottom: 1.5rem;
    margin-left: 0;
    text-align: center;
  }
`;

const SliderWrapper = styled.div`
  .slick-slide {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .slick-list {
    margin: 0;
  }

  .slick-track {
    display: flex;
    align-items: center;
  }
`;

const ImageWrapper = styled.div`
  position: relative;
  overflow: hidden;
  width: 100%;
`;

const Image = styled.img`
  width: 100%;
  height: 400px;
  object-fit: cover;
  display: block;
  padding: 0 0.1rem;
  transition: transform 0.4s ease-in-out;

  &:hover {
    transform: scale(1.05);
  }

  @media (min-width: 768px) {
    height: 600px;
    object-fit: contain;
  }
`;

const ImageOverlay = styled(motion.div)`
  background: rgba(0, 0, 0, 0.5);
  color: ${(props) => props.color};
  text-align: center;
  position: absolute;
  bottom: 7%;
  padding: 7px;
  width: fit-content;
  margin: 0 1rem;
  opacity: 0;
  transition: opacity 0.3s;

  @media (min-width: 768px) {
    font-size: 0.8rem;
    position: absolute;
    bottom: 7%;
    left: 50%;
    transform: translate(-50%, 0);
    padding: 10px;
    background: rgba(0, 0, 0, 0.5);
    color: ${(props) => props.color};
    text-align: center;
  }
`;

const ImageWrapperHover = styled(ImageWrapper)`
  &:hover ${ImageOverlay} {
    opacity: 1;
    overflow: hidden;
  }
`;

const NavigationButton = styled.button`
  background: ${(props) => props.theme.background};
  color: ${(props) => props.theme.text};
  border: none;
  padding: 8px;
  cursor: pointer;
  border-radius: 50%;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  z-index: 10;
  display: flex;
  justify-content: center;
  align-items: center;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  transition: background 0.3s;

  &:hover {
    background: ${(props) => props.theme.hoverBackground};
  }

  ${(props) => props.$left && "left: 16px;"}
  ${(props) => props.$right && "right: 16px;"}

  @media (max-width: 768px) {
    ${(props) => props.$left && "left: 8px;"}
    ${(props) => props.$right && "right: 8px;"}
  }
`;

const CustomNextArrow = ({ onClick }) => (
  <NavigationButton $right onClick={onClick} aria-label="Next Slide">
    <FaArrowRight />
  </NavigationButton>
);

const CustomPrevArrow = ({ onClick }) => (
  <NavigationButton $left onClick={onClick} aria-label="Previous Slide">
    <FaArrowLeft />
  </NavigationButton>
);

// Gallery component
const Gallery = ({ theme }) => {
  const images = [
    {
      src: image1,
      title: "Namiot na 30 osób, biały",
      year: "możliwośc dowolnej konfiguracji ścianek.",
    },
    {
      src: image2,
      title: "Namiot na 30 osób, biały",
      year: "możliwośc dowolnej konfiguracji ścianek.",
    },
    {
      src: image3,
      title: "Namiot na 60 osób, biały",
      year: "możliwośc dowolnej konfiguracji ścianek.",
    },
    {
      src: image4,
      title: "Krzesło białe, składane",
      year: "solidna konstrukcja.",
    },
    {
      src: image5,
      title: "Stół biały dla 6 osób, składany",
      year: "solidna konstrukcja.",
    },
    { src: image6, title: "Girlanda świetlna LED Ogrodowa 15m 30x", year: "" },
    { src: image7, title: "Wykorzystanie oświetlenia w namiocie", year: "" },
  ];

  const [isHovered, setIsHovered] = useState(false);
  const controls = useAnimation();
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const scrollPosition = window.scrollY + window.innerHeight;
      const gallerySection = document.getElementById("galeria");

      if (gallerySection && scrollPosition > gallerySection.offsetTop) {
        controls.start("visible");
        setIsVisible(true);
      } else {
        controls.start("hidden");
        setIsVisible(false);
      }
    };

    window.addEventListener("scroll", handleScroll);

    // Return a cleanup function to remove the event listener
    return () => window.removeEventListener("scroll", handleScroll);
  }, [controls]);

  const settings = {
    dots: false,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    nextArrow: <CustomNextArrow />,
    prevArrow: <CustomPrevArrow />,
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };

  return (
    <ThemeProvider theme={theme === "light" ? lightTheme : darkTheme}>
      <GalleryContainer id="galeria">
        <MotionTitle
          initial={{ x: -200 }}
          animate={{ x: 0 }}
          transition={{ delay: 0.3 }}
        >
          Nasza oferta
        </MotionTitle>
        <SliderWrapper>
          <Slider {...settings}>
            {images.map((image, index) => (
              <ImageWrapperHover
                key={index}
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
              >
                <Image
                  src={image.src}
                  alt={`Artwork ${index + 1}`}
                  loading="lazy"
                />
                <ImageOverlay
                  initial={{ opacity: 0 }}
                  animate={isHovered ? { opacity: 1 } : { opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  color={theme === "light" ? "#fff" : theme.text}
                >
                  {image.title} - {image.year}
                </ImageOverlay>
              </ImageWrapperHover>
            ))}
          </Slider>
        </SliderWrapper>
      </GalleryContainer>
    </ThemeProvider>
  );
};

export default withTheme(Gallery);





import React, { useEffect, useState } from "react";
import Slider from "react-slick";
import styled, { ThemeProvider } from "styled-components";
import { FaArrowLeft, FaArrowRight } from "react-icons/fa";
import { motion, useAnimation } from "framer-motion";
import image1 from "../assets/1.avif";
import image2 from "../assets/2.avif";
import image3 from "../assets/3.avif";
import image4 from "../assets/6.avif";
import image5 from "../assets/7.avif";
import image6 from "../assets/17.webp";
import image7 from "../assets/9.avif";
import { lightTheme } from "../styles/themes";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

// Styled components
const GalleryContainer = styled.section`
  margin: 0 5rem;
  padding: 2rem;
  background: ${(props) => props.theme.background};
  position: relative;
  z-index: 0;
  border-radius: 15px;

  @media (max-width: 768px) {
    margin: 0 1rem;
    padding: 1rem;
  }
`;

const MotionTitle = styled(motion.h2)`
  font-size: 2rem;
  color: ${(props) => props.theme.text};
  margin-bottom: 2rem;
  margin-left: 5rem;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);

  @media (max-width: 768px) {
    font-size: 1.7rem;
    margin-bottom: 1.5rem;
    margin-left: 0;
    text-align: center;
  }
`;

const SliderWrapper = styled.div`
  .slick-slide {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .slick-list {
    margin: 0;
  }

  .slick-track {
    display: flex;
    align-items: center;
  }
`;

const ImageWrapper = styled.div`
  position: relative;
  overflow: hidden;
  width: 100%;
`;

const Image = styled.img`
  width: 100%;
  height: 400px;
  object-fit: cover;
  display: block;
  padding: 0 0.1rem;
  transition: transform 0.4s ease-in-out;

  &:hover {
    transform: scale(1.05);
  }

  @media (min-width: 768px) {
    height: 600px;
    object-fit: contain;
  }
`;

const ImageOverlay = styled(motion.div)`
  background: rgba(0, 0, 0, 0.5);
  color: ${(props) => props.color};
  text-align: center;
  position: absolute;
  bottom: 7%;
  padding: 7px;
  width: fit-content;
  margin: 0 1rem;
  opacity: 0;
  transition: opacity 0.3s;

  @media (min-width: 768px) {
    font-size: 0.8rem;
    position: absolute;
    bottom: 7%;
    left: 50%;
    transform: translate(-50%, 0);
    padding: 10px;
    background: rgba(0, 0, 0, 0.5);
    color: ${(props) => props.color};
    text-align: center;
  }
`;

const ImageWrapperHover = styled(ImageWrapper)`
  &:hover ${ImageOverlay} {
    opacity: 1;
    overflow: hidden;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
`;

const ArrowButton = styled.button`
  background: transparent;
  border: none;
  color: ${(props) => props.theme.text};
  font-size: 2rem;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 10;
  cursor: pointer;

  &:hover {
    color: ${(props) => props.theme.linkHover};
  }
`;

const PrevArrow = ({ onClick }) => (
  <ArrowButton style={{ left: "10px" }} onClick={onClick}>
    <FaArrowLeft />
  </ArrowButton>
);

const NextArrow = ({ onClick }) => (
  <ArrowButton style={{ right: "10px" }} onClick={onClick}>
    <FaArrowRight />
  </ArrowButton>
);

function Gallery() {
  const [sliderRef, setSliderRef] = useState(null);
  const controls = useAnimation();

  useEffect(() => {
    if (sliderRef) {
      controls.start("visible");
      console.log("Slider mounted");
    }
  }, [sliderRef, controls]);

  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    prevArrow: <PrevArrow />,
    nextArrow: <NextArrow />,
  };

  return (
    <ThemeProvider theme={lightTheme}>
      <GalleryContainer id="galeria">
        <MotionTitle
          animate={controls}
          initial={{ opacity: 0 }}
          variants={{
            visible: { opacity: 1, transition: { duration: 1 } },
          }}
        >
          Galeria
        </MotionTitle>
        <SliderWrapper>
          <Slider ref={(slider) => setSliderRef(slider)} {...settings}>
            {[image1, image2, image3, image4, image5, image6, image7].map(
              (src, index) => (
                <ImageWrapperHover key={index}>
                  <Image src={src} alt={`Gallery Image ${index + 1}`} />
                  <ImageOverlay color="#fff">
                    {`Image ${index + 1}`}
                  </ImageOverlay>
                </ImageWrapperHover>
              )
            )}
          </Slider>
        </SliderWrapper>
      </GalleryContainer>
    </ThemeProvider>
  );
}

export default Gallery;



import React, { useState, useEffect, Suspense, lazy } from "react";
import styled, { ThemeProvider } from "styled-components";
import { lightTheme, darkTheme } from "./styles/themes";
import { Header } from "./components/Header";
import GlobalStyle from "./styles/GlobalStyle";
import ScrollToTopButton from "./ScrollToTopButton";
import { Footer } from "./components/Footer";
import image from "./assets/19.webp";
import { FaSun, FaMoon } from "react-icons/fa";
import { FaBars, FaTimes } from "react-icons/fa";
import { FaTent } from "react-icons/fa6";
import { motion } from "framer-motion";
import CookieConsent from "react-cookie-consent";

const Navbar = lazy(() => import("./components/Navbar"));
const Gallery = lazy(() => import("./components/Gallery"));
const Cennik = lazy(() => import("./components/Cennik"));
const About = lazy(() => import("./components/About"));
const Contact = lazy(() => import("./components/Contact"));

const LoadingContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  width: 100vw;
  background: #f0f0f0;
  font-size: 24px;
  color: #333;
  background: url(${image}) center center/contain no-repeat;

  @media (min-width: 460px) {
    background: url(${image}) center center/20% no-repeat;
  }
`;

const AppContainer = styled.div`
  display: flex;
  flex-direction: column;
  min-height: 100vh;
`;

const TabButton = styled.button`
  background: ${({ isActive, theme }) =>
    isActive ? theme.linkHover : "transparent"};
  border: none;
  color: ${({ isActive, theme }) => (isActive ? "#fff" : theme.text)};
  padding: 10px 20px;
  cursor: pointer;
  font-size: 16px;
  transition: background 0.3s ease;

  &:hover {
    background: ${({ theme }) => theme.hoverBackground};
  }
`;

// Dostosowanie do nieprzekazywania nieznanych propsów do DOM
const TabButtonStyled = styled.button.withConfig({
  shouldForwardProp: (prop) => !["isActive"].includes(prop),
})`
  background: ${({ isActive, theme }) =>
    isActive ? theme.linkHover : "transparent"};
  border: none;
  color: ${({ isActive, theme }) => (isActive ? "#fff" : theme.text)};
  padding: 10px 20px;
  cursor: pointer;
  font-size: 16px;
  transition: background 0.3s ease;

  &:hover {
    background: ${({ theme }) => theme.hoverBackground};
  }
`;

const NavTabs = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
`;

const TabContent = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
`;

function App() {
  const [theme, setTheme] = useState(() => {
    const savedTheme = localStorage.getItem("theme");
    return savedTheme ? savedTheme : "light";
  });

  const [activeTab, setActiveTab] = useState("visual");

  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    updateBodyClass(newTheme);
  };

  const updateBodyClass = (theme) => {
    document.body.classList.toggle("dark-mode", theme === "dark");
    document.body.classList.toggle("light-mode", theme === "light");
  };

  useEffect(() => {
    updateBodyClass(theme);
  }, [theme]);

  return (
    <ThemeProvider theme={theme === "light" ? lightTheme : darkTheme}>
      <GlobalStyle />
      <AppContainer id="start">
        <Suspense
          fallback={
            <LoadingContainer>
              {/* Możesz również dodać tekst tutaj */}
            </LoadingContainer>
          }
        >
          <Navbar toggleTheme={toggleTheme} />
          <Header />
          <About />
          <Contact />
          <div id="galeria">
            <NavTabs>
              <TabButtonStyled
                isActive={activeTab === "visual"}
                onClick={() => setActiveTab("visual")}
              >
                Wizualna
              </TabButtonStyled>
              <TabButtonStyled
                isActive={activeTab === "pricing"}
                onClick={() => setActiveTab("pricing")}
              >
                Cenowa
              </TabButtonStyled>
            </NavTabs>
            <TabContent>
              {activeTab === "visual" && <Gallery />}
              {activeTab === "pricing" && <Cennik />}
            </TabContent>
          </div>
          <Footer />
          <CookieConsent
            debug={true}
            location="bottom"
            style={{
              background: "#333",
              textAlign: "left",
              paddingBottom: "1rem",
              fontSize: "16px",
              fontFamily: "Gideon Roman",
            }}
            buttonStyle={{
              color: "#333",
              background: "#fff",
              fontSize: "18px",
              fontFamily: "Gideon Roman",
              marginRight: "1rem",
            }}
            buttonText="OK, rozumiem"
            expires={365}
          >
            "W ramach naszej witryny stosujemy pliki cookies w celu świadczenia
            Państwu usług na najwyższym poziomie, w tym w sposób dostosowany do
            indywidualnych potrzeb. Korzystanie z witryny bez zmiany ustawień
            dotyczących cookies oznacza, że będą one zamieszczane w Państwa
            urządzeniu końcowym. Możecie Państwo dokonać w każdym czasie zmiany
            ustawień dotyczących cookies."
          </CookieConsent>
        </Suspense>
        <ScrollToTopButton />
      </AppContainer>
    </ThemeProvider>
  );
}

export default App;

